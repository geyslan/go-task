// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: serverDomain/protos/port.proto

package port

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsServiceClient is the client API for PortsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsServiceClient interface {
	SavePorts(ctx context.Context, opts ...grpc.CallOption) (PortsService_SavePortsClient, error)
}

type portsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsServiceClient(cc grpc.ClientConnInterface) PortsServiceClient {
	return &portsServiceClient{cc}
}

func (c *portsServiceClient) SavePorts(ctx context.Context, opts ...grpc.CallOption) (PortsService_SavePortsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortsService_ServiceDesc.Streams[0], "/PortsService/SavePorts", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsServiceSavePortsClient{stream}
	return x, nil
}

type PortsService_SavePortsClient interface {
	Send(*SavePortRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type portsServiceSavePortsClient struct {
	grpc.ClientStream
}

func (x *portsServiceSavePortsClient) Send(m *SavePortRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portsServiceSavePortsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsServiceServer is the server API for PortsService service.
// All implementations must embed UnimplementedPortsServiceServer
// for forward compatibility
type PortsServiceServer interface {
	SavePorts(PortsService_SavePortsServer) error
	mustEmbedUnimplementedPortsServiceServer()
}

// UnimplementedPortsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortsServiceServer struct {
}

func (UnimplementedPortsServiceServer) SavePorts(PortsService_SavePortsServer) error {
	return status.Errorf(codes.Unimplemented, "method SavePorts not implemented")
}
func (UnimplementedPortsServiceServer) mustEmbedUnimplementedPortsServiceServer() {}

// UnsafePortsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsServiceServer will
// result in compilation errors.
type UnsafePortsServiceServer interface {
	mustEmbedUnimplementedPortsServiceServer()
}

func RegisterPortsServiceServer(s grpc.ServiceRegistrar, srv PortsServiceServer) {
	s.RegisterService(&PortsService_ServiceDesc, srv)
}

func _PortsService_SavePorts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortsServiceServer).SavePorts(&portsServiceSavePortsServer{stream})
}

type PortsService_SavePortsServer interface {
	SendAndClose(*Empty) error
	Recv() (*SavePortRequest, error)
	grpc.ServerStream
}

type portsServiceSavePortsServer struct {
	grpc.ServerStream
}

func (x *portsServiceSavePortsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portsServiceSavePortsServer) Recv() (*SavePortRequest, error) {
	m := new(SavePortRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PortsService_ServiceDesc is the grpc.ServiceDesc for PortsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortsService",
	HandlerType: (*PortsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SavePorts",
			Handler:       _PortsService_SavePorts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "serverDomain/protos/port.proto",
}
